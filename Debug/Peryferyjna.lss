
Peryferyjna.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000828  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000828  000008bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800070  00800070  000008cc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000130  00000000  00000000  000008fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014de  00000000  00000000  00000a2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000075e  00000000  00000000  00001f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000839  00000000  00000000  00002668  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000288  00000000  00000000  00002ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000398  00000000  00000000  0000312c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a6e  00000000  00000000  000034c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00003f32  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 30 00 	jmp	0x60	; 0x60 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 a8 03 	jmp	0x750	; 0x750 <__vector_11>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	1f 1c       	adc	r1, r15
  56:	1f 1e       	adc	r1, r31
  58:	1f 1e       	adc	r1, r31
  5a:	1f 1f       	adc	r17, r31
  5c:	1e 1f       	adc	r17, r30
  5e:	1e 1f       	adc	r17, r30

00000060 <__ctors_end>:
  60:	11 24       	eor	r1, r1
  62:	1f be       	out	0x3f, r1	; 63
  64:	cf e5       	ldi	r28, 0x5F	; 95
  66:	d4 e0       	ldi	r29, 0x04	; 4
  68:	de bf       	out	0x3e, r29	; 62
  6a:	cd bf       	out	0x3d, r28	; 61

0000006c <__do_copy_data>:
  6c:	10 e0       	ldi	r17, 0x00	; 0
  6e:	a0 e6       	ldi	r26, 0x60	; 96
  70:	b0 e0       	ldi	r27, 0x00	; 0
  72:	e8 e2       	ldi	r30, 0x28	; 40
  74:	f8 e0       	ldi	r31, 0x08	; 8
  76:	02 c0       	rjmp	.+4      	; 0x7c <__do_copy_data+0x10>
  78:	05 90       	lpm	r0, Z+
  7a:	0d 92       	st	X+, r0
  7c:	a0 37       	cpi	r26, 0x70	; 112
  7e:	b1 07       	cpc	r27, r17
  80:	d9 f7       	brne	.-10     	; 0x78 <__do_copy_data+0xc>

00000082 <__do_clear_bss>:
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	a0 e7       	ldi	r26, 0x70	; 112
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a1 37       	cpi	r26, 0x71	; 113
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  96:	0c 94 12 04 	jmp	0x824	; 0x824 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <ds1307_getdayofweek>:

/*
 * get number of days since 2000/01/01 (valid for 2001..2099)
 */
static uint16_t ds1307_date2days(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t days = d;
  9e:	50 e0       	ldi	r21, 0x00	; 0
	for (uint8_t i = 1; i < m; ++i)
  a0:	62 30       	cpi	r22, 0x02	; 2
  a2:	50 f0       	brcs	.+20     	; 0xb8 <ds1307_getdayofweek+0x1a>
  a4:	e4 e5       	ldi	r30, 0x54	; 84
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
		days += pgm_read_byte(ds1307_daysinmonth + i - 1);
  aa:	24 91       	lpm	r18, Z
  ac:	42 0f       	add	r20, r18
  ae:	51 1d       	adc	r21, r1
/*
 * get number of days since 2000/01/01 (valid for 2001..2099)
 */
static uint16_t ds1307_date2days(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t days = d;
	for (uint8_t i = 1; i < m; ++i)
  b0:	9f 5f       	subi	r25, 0xFF	; 255
  b2:	31 96       	adiw	r30, 0x01	; 1
  b4:	96 13       	cpse	r25, r22
  b6:	f9 cf       	rjmp	.-14     	; 0xaa <ds1307_getdayofweek+0xc>
		days += pgm_read_byte(ds1307_daysinmonth + i - 1);
	if (m > 2 && y % 4 == 0)
  b8:	63 30       	cpi	r22, 0x03	; 3
  ba:	28 f0       	brcs	.+10     	; 0xc6 <ds1307_getdayofweek+0x28>
  bc:	98 2f       	mov	r25, r24
  be:	93 70       	andi	r25, 0x03	; 3
  c0:	11 f4       	brne	.+4      	; 0xc6 <ds1307_getdayofweek+0x28>
		++days;
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
	return days + 365 * y + (y + 3) / 4 - 1;
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	2d e6       	ldi	r18, 0x6D	; 109
  ca:	31 e0       	ldi	r19, 0x01	; 1
  cc:	82 9f       	mul	r24, r18
  ce:	b0 01       	movw	r22, r0
  d0:	83 9f       	mul	r24, r19
  d2:	70 0d       	add	r23, r0
  d4:	92 9f       	mul	r25, r18
  d6:	70 0d       	add	r23, r0
  d8:	11 24       	eor	r1, r1
  da:	6b 5f       	subi	r22, 0xFB	; 251
  dc:	7f 4f       	sbci	r23, 0xFF	; 255
  de:	03 96       	adiw	r24, 0x03	; 3
  e0:	9c 01       	movw	r18, r24
  e2:	35 95       	asr	r19
  e4:	27 95       	ror	r18
  e6:	35 95       	asr	r19
  e8:	27 95       	ror	r18
  ea:	cb 01       	movw	r24, r22
  ec:	82 0f       	add	r24, r18
  ee:	93 1f       	adc	r25, r19
/*
 * get day of a week
 */
uint8_t ds1307_getdayofweek(uint8_t y, uint8_t m, uint8_t d) {
	uint16_t day = ds1307_date2days(y, m, d);
	return (day + 6) % 7;
  f0:	48 0f       	add	r20, r24
  f2:	59 1f       	adc	r21, r25
  f4:	9a 01       	movw	r18, r20
  f6:	a3 e9       	ldi	r26, 0x93	; 147
  f8:	b4 e2       	ldi	r27, 0x24	; 36
  fa:	0e 94 ce 03 	call	0x79c	; 0x79c <__umulhisi3>
  fe:	28 1b       	sub	r18, r24
 100:	39 0b       	sbc	r19, r25
 102:	36 95       	lsr	r19
 104:	27 95       	ror	r18
 106:	82 0f       	add	r24, r18
 108:	93 1f       	adc	r25, r19
 10a:	96 95       	lsr	r25
 10c:	87 95       	ror	r24
 10e:	96 95       	lsr	r25
 110:	87 95       	ror	r24
 112:	9c 01       	movw	r18, r24
 114:	22 0f       	add	r18, r18
 116:	33 1f       	adc	r19, r19
 118:	22 0f       	add	r18, r18
 11a:	33 1f       	adc	r19, r19
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	b9 01       	movw	r22, r18
 122:	68 1b       	sub	r22, r24
 124:	79 0b       	sbc	r23, r25
 126:	cb 01       	movw	r24, r22
}
 128:	74 2f       	mov	r23, r20
 12a:	78 1b       	sub	r23, r24
 12c:	87 2f       	mov	r24, r23
 12e:	08 95       	ret

00000130 <ds1307_setdate>:

/*
 * set date
 */
uint8_t ds1307_setdate(uint8_t year, uint8_t month, uint8_t day, uint8_t hour, uint8_t minute, uint8_t second) {
 130:	cf 92       	push	r12
 132:	df 92       	push	r13
 134:	ef 92       	push	r14
 136:	ff 92       	push	r15
 138:	0f 93       	push	r16
 13a:	1f 93       	push	r17
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	f8 2e       	mov	r15, r24
 142:	16 2f       	mov	r17, r22
 144:	d4 2f       	mov	r29, r20
 146:	c2 2f       	mov	r28, r18
	//sanitize data
	if (second < 0 || second > 59 ||
 148:	8b e3       	ldi	r24, 0x3B	; 59
 14a:	8e 15       	cp	r24, r14
 14c:	08 f4       	brcc	.+2      	; 0x150 <ds1307_setdate+0x20>
 14e:	80 c0       	rjmp	.+256    	; 0x250 <ds1307_setdate+0x120>
		minute < 0 || minute > 59 ||
 150:	0c 33       	cpi	r16, 0x3C	; 60
 152:	08 f0       	brcs	.+2      	; 0x156 <ds1307_setdate+0x26>
 154:	7f c0       	rjmp	.+254    	; 0x254 <ds1307_setdate+0x124>
		hour < 0 || hour > 23 ||
 156:	28 31       	cpi	r18, 0x18	; 24
 158:	08 f0       	brcs	.+2      	; 0x15c <ds1307_setdate+0x2c>
 15a:	7e c0       	rjmp	.+252    	; 0x258 <ds1307_setdate+0x128>
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	84 0f       	add	r24, r20
 160:	8f 31       	cpi	r24, 0x1F	; 31
 162:	08 f0       	brcs	.+2      	; 0x166 <ds1307_setdate+0x36>
 164:	7b c0       	rjmp	.+246    	; 0x25c <ds1307_setdate+0x12c>
		day < 1 || day > 31 ||
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	86 0f       	add	r24, r22
 16a:	8c 30       	cpi	r24, 0x0C	; 12
 16c:	08 f0       	brcs	.+2      	; 0x170 <ds1307_setdate+0x40>
 16e:	78 c0       	rjmp	.+240    	; 0x260 <ds1307_setdate+0x130>
		month < 1 || month > 12 ||
		year < 0 || year > 99)
 170:	83 e6       	ldi	r24, 0x63	; 99
 172:	8f 15       	cp	r24, r15
 174:	08 f4       	brcc	.+2      	; 0x178 <ds1307_setdate+0x48>
 176:	76 c0       	rjmp	.+236    	; 0x264 <ds1307_setdate+0x134>
		return 8;

	//sanitize day based on month
	if(day > pgm_read_byte(ds1307_daysinmonth + month - 1))
 178:	e6 2f       	mov	r30, r22
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	ed 5a       	subi	r30, 0xAD	; 173
 17e:	ff 4f       	sbci	r31, 0xFF	; 255
 180:	e4 91       	lpm	r30, Z
 182:	e4 17       	cp	r30, r20
 184:	08 f4       	brcc	.+2      	; 0x188 <ds1307_setdate+0x58>
 186:	70 c0       	rjmp	.+224    	; 0x268 <ds1307_setdate+0x138>
		return 0;

	//get day of week
	uint8_t dayofweek = ds1307_getdayofweek(year, month, day);
 188:	8f 2d       	mov	r24, r15
 18a:	0e 94 4f 00 	call	0x9e	; 0x9e <ds1307_getdayofweek>
 18e:	c8 2e       	mov	r12, r24

	//write date
	i2cStart();
 190:	0e 94 bc 02 	call	0x578	; 0x578 <i2cStart>
	i2cSend(DS1307_ADDRESS_W);
 194:	80 ed       	ldi	r24, 0xD0	; 208
 196:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>
	i2cSend(0x00);//stop oscillator
 19a:	80 e0       	ldi	r24, 0x00	; 0
 19c:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 1a0:	0f 2e       	mov	r0, r31
 1a2:	fa e0       	ldi	r31, 0x0A	; 10
 1a4:	df 2e       	mov	r13, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	8e 2d       	mov	r24, r14
 1aa:	6d 2d       	mov	r22, r13
 1ac:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 1b0:	98 2f       	mov	r25, r24
 1b2:	99 0f       	add	r25, r25
 1b4:	89 0f       	add	r24, r25
 1b6:	88 0f       	add	r24, r24

	//write date
	i2cStart();
	i2cSend(DS1307_ADDRESS_W);
	i2cSend(0x00);//stop oscillator
	i2cSend(ds1307_dec2bcd(second));
 1b8:	8e 0d       	add	r24, r14
 1ba:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 1be:	80 2f       	mov	r24, r16
 1c0:	6d 2d       	mov	r22, r13
 1c2:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 1c6:	98 2f       	mov	r25, r24
 1c8:	99 0f       	add	r25, r25
 1ca:	89 0f       	add	r24, r25
 1cc:	88 0f       	add	r24, r24
	//write date
	i2cStart();
	i2cSend(DS1307_ADDRESS_W);
	i2cSend(0x00);//stop oscillator
	i2cSend(ds1307_dec2bcd(second));
	i2cSend(ds1307_dec2bcd(minute));
 1ce:	80 0f       	add	r24, r16
 1d0:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 1d4:	8c 2f       	mov	r24, r28
 1d6:	6d 2d       	mov	r22, r13
 1d8:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 1dc:	98 2f       	mov	r25, r24
 1de:	99 0f       	add	r25, r25
 1e0:	89 0f       	add	r24, r25
 1e2:	88 0f       	add	r24, r24
	i2cStart();
	i2cSend(DS1307_ADDRESS_W);
	i2cSend(0x00);//stop oscillator
	i2cSend(ds1307_dec2bcd(second));
	i2cSend(ds1307_dec2bcd(minute));
	i2cSend(ds1307_dec2bcd(hour));
 1e4:	8c 0f       	add	r24, r28
 1e6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 1ea:	8c 2d       	mov	r24, r12
 1ec:	6d 2d       	mov	r22, r13
 1ee:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 1f2:	98 2f       	mov	r25, r24
 1f4:	99 0f       	add	r25, r25
 1f6:	89 0f       	add	r24, r25
 1f8:	88 0f       	add	r24, r24
	i2cSend(DS1307_ADDRESS_W);
	i2cSend(0x00);//stop oscillator
	i2cSend(ds1307_dec2bcd(second));
	i2cSend(ds1307_dec2bcd(minute));
	i2cSend(ds1307_dec2bcd(hour));
	i2cSend(ds1307_dec2bcd(dayofweek));
 1fa:	8c 0d       	add	r24, r12
 1fc:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 200:	8d 2f       	mov	r24, r29
 202:	6d 2d       	mov	r22, r13
 204:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 208:	98 2f       	mov	r25, r24
 20a:	99 0f       	add	r25, r25
 20c:	89 0f       	add	r24, r25
 20e:	88 0f       	add	r24, r24
	i2cSend(0x00);//stop oscillator
	i2cSend(ds1307_dec2bcd(second));
	i2cSend(ds1307_dec2bcd(minute));
	i2cSend(ds1307_dec2bcd(hour));
	i2cSend(ds1307_dec2bcd(dayofweek));
	i2cSend(ds1307_dec2bcd(day));
 210:	8d 0f       	add	r24, r29
 212:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 216:	81 2f       	mov	r24, r17
 218:	6d 2d       	mov	r22, r13
 21a:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 21e:	98 2f       	mov	r25, r24
 220:	99 0f       	add	r25, r25
 222:	89 0f       	add	r24, r25
 224:	88 0f       	add	r24, r24
	i2cSend(ds1307_dec2bcd(second));
	i2cSend(ds1307_dec2bcd(minute));
	i2cSend(ds1307_dec2bcd(hour));
	i2cSend(ds1307_dec2bcd(dayofweek));
	i2cSend(ds1307_dec2bcd(day));
	i2cSend(ds1307_dec2bcd(month));
 226:	81 0f       	add	r24, r17
 228:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>

/*
 * transform decimal value to bcd
 */
uint8_t ds1307_dec2bcd(uint8_t val) {
	return val + 6 * (val / 10);
 22c:	8f 2d       	mov	r24, r15
 22e:	6d 2d       	mov	r22, r13
 230:	0e 94 c2 03 	call	0x784	; 0x784 <__udivmodqi4>
 234:	98 2f       	mov	r25, r24
 236:	99 0f       	add	r25, r25
 238:	89 0f       	add	r24, r25
 23a:	88 0f       	add	r24, r24
	i2cSend(ds1307_dec2bcd(minute));
	i2cSend(ds1307_dec2bcd(hour));
	i2cSend(ds1307_dec2bcd(dayofweek));
	i2cSend(ds1307_dec2bcd(day));
	i2cSend(ds1307_dec2bcd(month));
	i2cSend(ds1307_dec2bcd(year));
 23c:	8f 0d       	add	r24, r15
 23e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>
	i2cSend(0x00); //start oscillator
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>
	i2cStop();
 248:	0e 94 c1 02 	call	0x582	; 0x582 <i2cStop>

	return 1;
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0d c0       	rjmp	.+26     	; 0x26a <ds1307_setdate+0x13a>
		minute < 0 || minute > 59 ||
		hour < 0 || hour > 23 ||
		day < 1 || day > 31 ||
		month < 1 || month > 12 ||
		year < 0 || year > 99)
		return 8;
 250:	88 e0       	ldi	r24, 0x08	; 8
 252:	0b c0       	rjmp	.+22     	; 0x26a <ds1307_setdate+0x13a>
 254:	88 e0       	ldi	r24, 0x08	; 8
 256:	09 c0       	rjmp	.+18     	; 0x26a <ds1307_setdate+0x13a>
 258:	88 e0       	ldi	r24, 0x08	; 8
 25a:	07 c0       	rjmp	.+14     	; 0x26a <ds1307_setdate+0x13a>
 25c:	88 e0       	ldi	r24, 0x08	; 8
 25e:	05 c0       	rjmp	.+10     	; 0x26a <ds1307_setdate+0x13a>
 260:	88 e0       	ldi	r24, 0x08	; 8
 262:	03 c0       	rjmp	.+6      	; 0x26a <ds1307_setdate+0x13a>
 264:	88 e0       	ldi	r24, 0x08	; 8
 266:	01 c0       	rjmp	.+2      	; 0x26a <ds1307_setdate+0x13a>

	//sanitize day based on month
	if(day > pgm_read_byte(ds1307_daysinmonth + month - 1))
		return 0;
 268:	80 e0       	ldi	r24, 0x00	; 0
	i2cSend(ds1307_dec2bcd(year));
	i2cSend(0x00); //start oscillator
	i2cStop();

	return 1;
}
 26a:	df 91       	pop	r29
 26c:	cf 91       	pop	r28
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	df 90       	pop	r13
 278:	cf 90       	pop	r12
 27a:	08 95       	ret

0000027c <ds1307_getdate>:


/*
 * get date
 */
void ds1307_getdate(uint8_t *year, uint8_t *month, uint8_t *day, uint8_t *hour, uint8_t *minute, uint8_t *second) {
 27c:	8f 92       	push	r8
 27e:	9f 92       	push	r9
 280:	af 92       	push	r10
 282:	bf 92       	push	r11
 284:	cf 92       	push	r12
 286:	df 92       	push	r13
 288:	ef 92       	push	r14
 28a:	ff 92       	push	r15
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	ec 01       	movw	r28, r24
 296:	6b 01       	movw	r12, r22
 298:	5a 01       	movw	r10, r20
 29a:	49 01       	movw	r8, r18
	i2cStart();
 29c:	0e 94 bc 02 	call	0x578	; 0x578 <i2cStart>
	i2cSend(DS1307_ADDRESS_W);
 2a0:	80 ed       	ldi	r24, 0xD0	; 208
 2a2:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>
	i2cSend(0x00);//stop oscillator
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>
	i2cStop();
 2ac:	0e 94 c1 02 	call	0x582	; 0x582 <i2cStop>

	i2cStart();
 2b0:	0e 94 bc 02 	call	0x578	; 0x578 <i2cStart>
	i2cSend(DS1307_ADDRESS_R);
 2b4:	81 ed       	ldi	r24, 0xD1	; 209
 2b6:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <i2cSend>
	*second = ds1307_bcd2dec(i2cReadAck() & 0x7F);
 2ba:	0e 94 c4 02 	call	0x588	; 0x588 <i2cReadAck>
 2be:	8f 77       	andi	r24, 0x7F	; 127

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 2c0:	98 2f       	mov	r25, r24
 2c2:	92 95       	swap	r25
 2c4:	9f 70       	andi	r25, 0x0F	; 15
 2c6:	29 2f       	mov	r18, r25
 2c8:	22 0f       	add	r18, r18
 2ca:	92 0f       	add	r25, r18
 2cc:	99 0f       	add	r25, r25
 2ce:	89 1b       	sub	r24, r25
	i2cSend(0x00);//stop oscillator
	i2cStop();

	i2cStart();
	i2cSend(DS1307_ADDRESS_R);
	*second = ds1307_bcd2dec(i2cReadAck() & 0x7F);
 2d0:	f7 01       	movw	r30, r14
 2d2:	80 83       	st	Z, r24
	*minute = ds1307_bcd2dec(i2cReadAck());
 2d4:	0e 94 c4 02 	call	0x588	; 0x588 <i2cReadAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 2d8:	98 2f       	mov	r25, r24
 2da:	92 95       	swap	r25
 2dc:	9f 70       	andi	r25, 0x0F	; 15
 2de:	29 2f       	mov	r18, r25
 2e0:	22 0f       	add	r18, r18
 2e2:	92 0f       	add	r25, r18
 2e4:	99 0f       	add	r25, r25
 2e6:	89 1b       	sub	r24, r25
	i2cStop();

	i2cStart();
	i2cSend(DS1307_ADDRESS_R);
	*second = ds1307_bcd2dec(i2cReadAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2cReadAck());
 2e8:	f8 01       	movw	r30, r16
 2ea:	80 83       	st	Z, r24
	*hour = ds1307_bcd2dec(i2cReadAck());
 2ec:	0e 94 c4 02 	call	0x588	; 0x588 <i2cReadAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 2f0:	98 2f       	mov	r25, r24
 2f2:	92 95       	swap	r25
 2f4:	9f 70       	andi	r25, 0x0F	; 15
 2f6:	29 2f       	mov	r18, r25
 2f8:	22 0f       	add	r18, r18
 2fa:	92 0f       	add	r25, r18
 2fc:	99 0f       	add	r25, r25
 2fe:	89 1b       	sub	r24, r25

	i2cStart();
	i2cSend(DS1307_ADDRESS_R);
	*second = ds1307_bcd2dec(i2cReadAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2cReadAck());
	*hour = ds1307_bcd2dec(i2cReadAck());
 300:	f4 01       	movw	r30, r8
 302:	80 83       	st	Z, r24
	i2cReadAck();
 304:	0e 94 c4 02 	call	0x588	; 0x588 <i2cReadAck>
	*day = ds1307_bcd2dec(i2cReadAck());
 308:	0e 94 c4 02 	call	0x588	; 0x588 <i2cReadAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 30c:	98 2f       	mov	r25, r24
 30e:	92 95       	swap	r25
 310:	9f 70       	andi	r25, 0x0F	; 15
 312:	29 2f       	mov	r18, r25
 314:	22 0f       	add	r18, r18
 316:	92 0f       	add	r25, r18
 318:	99 0f       	add	r25, r25
 31a:	89 1b       	sub	r24, r25
	i2cSend(DS1307_ADDRESS_R);
	*second = ds1307_bcd2dec(i2cReadAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2cReadAck());
	*hour = ds1307_bcd2dec(i2cReadAck());
	i2cReadAck();
	*day = ds1307_bcd2dec(i2cReadAck());
 31c:	f5 01       	movw	r30, r10
 31e:	80 83       	st	Z, r24
	*month = ds1307_bcd2dec(i2cReadAck());
 320:	0e 94 c4 02 	call	0x588	; 0x588 <i2cReadAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 324:	98 2f       	mov	r25, r24
 326:	92 95       	swap	r25
 328:	9f 70       	andi	r25, 0x0F	; 15
 32a:	29 2f       	mov	r18, r25
 32c:	22 0f       	add	r18, r18
 32e:	92 0f       	add	r25, r18
 330:	99 0f       	add	r25, r25
 332:	89 1b       	sub	r24, r25
	*second = ds1307_bcd2dec(i2cReadAck() & 0x7F);
	*minute = ds1307_bcd2dec(i2cReadAck());
	*hour = ds1307_bcd2dec(i2cReadAck());
	i2cReadAck();
	*day = ds1307_bcd2dec(i2cReadAck());
	*month = ds1307_bcd2dec(i2cReadAck());
 334:	f6 01       	movw	r30, r12
 336:	80 83       	st	Z, r24
	*year = ds1307_bcd2dec(i2cReadNoAck());
 338:	0e 94 ca 02 	call	0x594	; 0x594 <i2cReadNoAck>

/*
 * transform bcd value to deciaml
 */
static uint8_t ds1307_bcd2dec(uint8_t val) {
	return val - 6 * (val >> 4);
 33c:	98 2f       	mov	r25, r24
 33e:	92 95       	swap	r25
 340:	9f 70       	andi	r25, 0x0F	; 15
 342:	29 2f       	mov	r18, r25
 344:	22 0f       	add	r18, r18
 346:	92 0f       	add	r25, r18
 348:	99 0f       	add	r25, r25
 34a:	89 1b       	sub	r24, r25
	*minute = ds1307_bcd2dec(i2cReadAck());
	*hour = ds1307_bcd2dec(i2cReadAck());
	i2cReadAck();
	*day = ds1307_bcd2dec(i2cReadAck());
	*month = ds1307_bcd2dec(i2cReadAck());
	*year = ds1307_bcd2dec(i2cReadNoAck());
 34c:	88 83       	st	Y, r24
	i2cStop();
 34e:	0e 94 c1 02 	call	0x582	; 0x582 <i2cStop>
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	ff 90       	pop	r15
 35c:	ef 90       	pop	r14
 35e:	df 90       	pop	r13
 360:	cf 90       	pop	r12
 362:	bf 90       	pop	r11
 364:	af 90       	pop	r10
 366:	9f 90       	pop	r9
 368:	8f 90       	pop	r8
 36a:	08 95       	ret

0000036c <WriteToLCD>:

void WriteToLCD (unsigned char v,unsigned char  rs)
{
    unsigned char bf;

    SET_OUT_LCD_D4;
 36c:	d3 9a       	sbi	0x1a, 3	; 26
    SET_OUT_LCD_D5;
 36e:	d4 9a       	sbi	0x1a, 4	; 26
    SET_OUT_LCD_D6;
 370:	d5 9a       	sbi	0x1a, 5	; 26
    SET_OUT_LCD_D7;
 372:	d6 9a       	sbi	0x1a, 6	; 26

    if(v&0x10) SET_LCD_D4; else CLR_LCD_D4;
 374:	84 ff       	sbrs	r24, 4
 376:	02 c0       	rjmp	.+4      	; 0x37c <WriteToLCD+0x10>
 378:	db 9a       	sbi	0x1b, 3	; 27
 37a:	01 c0       	rjmp	.+2      	; 0x37e <WriteToLCD+0x12>
 37c:	db 98       	cbi	0x1b, 3	; 27
    if(v&0x20) SET_LCD_D5; else CLR_LCD_D5;
 37e:	85 ff       	sbrs	r24, 5
 380:	02 c0       	rjmp	.+4      	; 0x386 <WriteToLCD+0x1a>
 382:	dc 9a       	sbi	0x1b, 4	; 27
 384:	01 c0       	rjmp	.+2      	; 0x388 <WriteToLCD+0x1c>
 386:	dc 98       	cbi	0x1b, 4	; 27
    if(v&0x40) SET_LCD_D6; else CLR_LCD_D6;
 388:	86 ff       	sbrs	r24, 6
 38a:	02 c0       	rjmp	.+4      	; 0x390 <WriteToLCD+0x24>
 38c:	dd 9a       	sbi	0x1b, 5	; 27
 38e:	01 c0       	rjmp	.+2      	; 0x392 <WriteToLCD+0x26>
 390:	dd 98       	cbi	0x1b, 5	; 27
    if(v&0x80) SET_LCD_D7; else CLR_LCD_D7;
 392:	88 23       	and	r24, r24
 394:	14 f4       	brge	.+4      	; 0x39a <WriteToLCD+0x2e>
 396:	de 9a       	sbi	0x1b, 6	; 27
 398:	01 c0       	rjmp	.+2      	; 0x39c <WriteToLCD+0x30>
 39a:	de 98       	cbi	0x1b, 6	; 27
 
    CLR_LCD_E;
 39c:	da 98       	cbi	0x1b, 2	; 27
    if(rs) SET_LCD_RS;else CLR_LCD_RS;
 39e:	66 23       	and	r22, r22
 3a0:	11 f0       	breq	.+4      	; 0x3a6 <WriteToLCD+0x3a>
 3a2:	d8 9a       	sbi	0x1b, 0	; 27
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <WriteToLCD+0x3c>
 3a6:	d8 98       	cbi	0x1b, 0	; 27
    CLR_LCD_RW;
 3a8:	d9 98       	cbi	0x1b, 1	; 27
	...

    LCD_NOP;
    SET_LCD_E;
 3b2:	da 9a       	sbi	0x1b, 2	; 27
	...
    LCD_NOP; 
    CLR_LCD_E;
 3bc:	da 98       	cbi	0x1b, 2	; 27
	...
    LCD_NOP;
 
    if(v&0x01) SET_LCD_D4; else CLR_LCD_D4;
 3c6:	80 ff       	sbrs	r24, 0
 3c8:	02 c0       	rjmp	.+4      	; 0x3ce <WriteToLCD+0x62>
 3ca:	db 9a       	sbi	0x1b, 3	; 27
 3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <WriteToLCD+0x64>
 3ce:	db 98       	cbi	0x1b, 3	; 27
    if(v&0x02) SET_LCD_D5; else CLR_LCD_D5;
 3d0:	81 ff       	sbrs	r24, 1
 3d2:	02 c0       	rjmp	.+4      	; 0x3d8 <WriteToLCD+0x6c>
 3d4:	dc 9a       	sbi	0x1b, 4	; 27
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <WriteToLCD+0x6e>
 3d8:	dc 98       	cbi	0x1b, 4	; 27
    if(v&0x04) SET_LCD_D6; else CLR_LCD_D6;
 3da:	82 ff       	sbrs	r24, 2
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <WriteToLCD+0x76>
 3de:	dd 9a       	sbi	0x1b, 5	; 27
 3e0:	01 c0       	rjmp	.+2      	; 0x3e4 <WriteToLCD+0x78>
 3e2:	dd 98       	cbi	0x1b, 5	; 27
    if(v&0x08) SET_LCD_D7; else CLR_LCD_D7;
 3e4:	83 ff       	sbrs	r24, 3
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <WriteToLCD+0x80>
 3e8:	de 9a       	sbi	0x1b, 6	; 27
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <WriteToLCD+0x82>
 3ec:	de 98       	cbi	0x1b, 6	; 27
	...
 
    LCD_NOP;
    SET_LCD_E;
 3f6:	da 9a       	sbi	0x1b, 2	; 27
	...
    LCD_NOP; 
    CLR_LCD_E;
 400:	da 98       	cbi	0x1b, 2	; 27
	...
    LCD_NOP;
 
    SET_IN_LCD_D4;
 40a:	d3 98       	cbi	0x1a, 3	; 26
    SET_IN_LCD_D5;
 40c:	d4 98       	cbi	0x1a, 4	; 26
    SET_IN_LCD_D6;
 40e:	d5 98       	cbi	0x1a, 5	; 26
    SET_IN_LCD_D7;
 410:	d6 98       	cbi	0x1a, 6	; 26

    CLR_LCD_RS;
 412:	d8 98       	cbi	0x1b, 0	; 27
    SET_LCD_RW;
 414:	d9 9a       	sbi	0x1b, 1	; 27
    SET_LCD_D7;
 416:	de 9a       	sbi	0x1b, 6	; 27
	...

/* Przyda³by siê pe³ny odczyt */
    do
    {
        LCD_NOP;
        SET_LCD_E;
 420:	da 9a       	sbi	0x1b, 2	; 27
	...
        LCD_NOP;
        bf = IS_SET_LCD_D7;
 42a:	89 b3       	in	r24, 0x19	; 25
        CLR_LCD_E;
 42c:	da 98       	cbi	0x1b, 2	; 27
	...
        LCD_NOP;
        SET_LCD_E;
 436:	da 9a       	sbi	0x1b, 2	; 27
	...
        LCD_NOP;
        LCD_NOP;
        CLR_LCD_E;
 448:	da 98       	cbi	0x1b, 2	; 27
        
    }while( bf );
 44a:	86 fd       	sbrc	r24, 6
 44c:	e5 cf       	rjmp	.-54     	; 0x418 <WriteToLCD+0xac>
}
 44e:	08 95       	ret

00000450 <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 450:	85 e4       	ldi	r24, 0x45	; 69
 452:	9e e1       	ldi	r25, 0x1E	; 30
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <lcd_init+0x4>
 458:	00 c0       	rjmp	.+0      	; 0x45a <lcd_init+0xa>
 45a:	00 00       	nop

void lcd_init(void)
{
    _delay_ms(31);    
   
    SET_OUT_LCD_RS;
 45c:	d0 9a       	sbi	0x1a, 0	; 26
    SET_OUT_LCD_RW;
 45e:	d1 9a       	sbi	0x1a, 1	; 26
    SET_OUT_LCD_E;
 460:	d2 9a       	sbi	0x1a, 2	; 26
    SET_OUT_LCD_D4;
 462:	d3 9a       	sbi	0x1a, 3	; 26
    SET_OUT_LCD_D5;
 464:	d4 9a       	sbi	0x1a, 4	; 26
    SET_OUT_LCD_D6;
 466:	d5 9a       	sbi	0x1a, 5	; 26
    SET_OUT_LCD_D7;
 468:	d6 9a       	sbi	0x1a, 6	; 26

    CLR_LCD_E;
 46a:	da 98       	cbi	0x1b, 2	; 27
    CLR_LCD_RS;
 46c:	d8 98       	cbi	0x1b, 0	; 27
    CLR_LCD_RW;
 46e:	d9 98       	cbi	0x1b, 1	; 27
    SET_LCD_D4;
 470:	db 9a       	sbi	0x1b, 3	; 27
    SET_LCD_D5;
 472:	dc 9a       	sbi	0x1b, 4	; 27
    CLR_LCD_D6;
 474:	dd 98       	cbi	0x1b, 5	; 27
    CLR_LCD_D7;        
 476:	de 98       	cbi	0x1b, 6	; 27
	...
  
    LCD_NOP;
    SET_LCD_E;
 480:	da 9a       	sbi	0x1b, 2	; 27
	...
    LCD_NOP; 
    CLR_LCD_E;
 48a:	da 98       	cbi	0x1b, 2	; 27
	...
 494:	83 ec       	ldi	r24, 0xC3	; 195
 496:	99 e0       	ldi	r25, 0x09	; 9
 498:	01 97       	sbiw	r24, 0x01	; 1
 49a:	f1 f7       	brne	.-4      	; 0x498 <__stack+0x39>
 49c:	00 c0       	rjmp	.+0      	; 0x49e <__stack+0x3f>
	...
    LCD_NOP;
    _delay_ms(10);

    LCD_NOP;
 4a6:	00 00       	nop
    SET_LCD_E;
 4a8:	da 9a       	sbi	0x1b, 2	; 27
	...
    LCD_NOP; 
    CLR_LCD_E;
 4b2:	da 98       	cbi	0x1b, 2	; 27
	...
 4bc:	83 ef       	ldi	r24, 0xF3	; 243
 4be:	91 e0       	ldi	r25, 0x01	; 1
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <__stack+0x61>
 4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <__stack+0x67>
	...
    LCD_NOP;
    _delay_ms(2);

    LCD_NOP;
 4ce:	00 00       	nop
    SET_LCD_E;
 4d0:	da 9a       	sbi	0x1b, 2	; 27
	...
    LCD_NOP; 
    CLR_LCD_E;
 4da:	da 98       	cbi	0x1b, 2	; 27
	...
 4e4:	83 ef       	ldi	r24, 0xF3	; 243
 4e6:	91 e0       	ldi	r25, 0x01	; 1
 4e8:	01 97       	sbiw	r24, 0x01	; 1
 4ea:	f1 f7       	brne	.-4      	; 0x4e8 <__stack+0x89>
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <__stack+0x8f>
 4ee:	00 00       	nop
    LCD_NOP;
    _delay_ms(2);

    CLR_LCD_D4;
 4f0:	db 98       	cbi	0x1b, 3	; 27
	...
    LCD_NOP;
    SET_LCD_E;
 4fa:	da 9a       	sbi	0x1b, 2	; 27
	...
    LCD_NOP; 
    CLR_LCD_E;
 504:	da 98       	cbi	0x1b, 2	; 27
	...
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	9a e1       	ldi	r25, 0x1A	; 26
 510:	9a 95       	dec	r25
 512:	f1 f7       	brne	.-4      	; 0x510 <__stack+0xb1>
 514:	00 c0       	rjmp	.+0      	; 0x516 <__stack+0xb7>
    LCD_NOP;
    _delay_us(80);

    WriteToLCD (0x28 , LCDCOMMAND) ;
 516:	60 e0       	ldi	r22, 0x00	; 0
 518:	88 e2       	ldi	r24, 0x28	; 40
 51a:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
    LCD_DISPLAY(0) ;
 51e:	60 e0       	ldi	r22, 0x00	; 0
 520:	88 e0       	ldi	r24, 0x08	; 8
 522:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
    LCD_CLEAR ;
 526:	60 e0       	ldi	r22, 0x00	; 0
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
    LCD_ENTRY_MODE(LCDINCREMENT) ;
 52e:	60 e0       	ldi	r22, 0x00	; 0
 530:	86 e0       	ldi	r24, 0x06	; 6
 532:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
 536:	08 95       	ret

00000538 <lcd_puts>:

/*--------------------------------------------------------*/
/* Wyswietla tekst na aktualnej pozycji kursora */

void lcd_puts(char *str)
{
 538:	1f 93       	push	r17
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	ec 01       	movw	r28, r24
    unsigned char i =0;

    while( str[i])
 540:	88 81       	ld	r24, Y
 542:	88 23       	and	r24, r24
 544:	59 f0       	breq	.+22     	; 0x55c <lcd_puts+0x24>
/*--------------------------------------------------------*/
/* Wyswietla tekst na aktualnej pozycji kursora */

void lcd_puts(char *str)
{
    unsigned char i =0;
 546:	10 e0       	ldi	r17, 0x00	; 0

    while( str[i])
        LCD_WRITE_DATA(str[i++]) ;
 548:	1f 5f       	subi	r17, 0xFF	; 255
 54a:	61 e0       	ldi	r22, 0x01	; 1
 54c:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>

void lcd_puts(char *str)
{
    unsigned char i =0;

    while( str[i])
 550:	fe 01       	movw	r30, r28
 552:	e1 0f       	add	r30, r17
 554:	f1 1d       	adc	r31, r1
 556:	80 81       	ld	r24, Z
 558:	81 11       	cpse	r24, r1
 55a:	f6 cf       	rjmp	.-20     	; 0x548 <lcd_puts+0x10>
        LCD_WRITE_DATA(str[i++]) ;
 55c:	df 91       	pop	r29
 55e:	cf 91       	pop	r28
 560:	1f 91       	pop	r17
 562:	08 95       	ret

00000564 <initI2C>:
#include "i2c.h"

void initI2C(void) {
  TWBR = 32;                                 /* ustalenie szybkości transmisji */
 564:	80 e2       	ldi	r24, 0x20	; 32
 566:	80 b9       	out	0x00, r24	; 0
                                             /* 8MHz / (16+2*TWBR*1) ~= 100kHz */
  TWCR |= (1 << TWEN);                                            /* włączenie */
 568:	86 b7       	in	r24, 0x36	; 54
 56a:	84 60       	ori	r24, 0x04	; 4
 56c:	86 bf       	out	0x36, r24	; 54
 56e:	08 95       	ret

00000570 <i2cWaitForComplete>:
}

void i2cWaitForComplete(void) {
  loop_until_bit_is_set(TWCR, TWINT);
 570:	06 b6       	in	r0, 0x36	; 54
 572:	07 fe       	sbrs	r0, 7
 574:	fd cf       	rjmp	.-6      	; 0x570 <i2cWaitForComplete>
}
 576:	08 95       	ret

00000578 <i2cStart>:

void i2cStart(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTA));
 578:	84 ea       	ldi	r24, 0xA4	; 164
 57a:	86 bf       	out	0x36, r24	; 54
  i2cWaitForComplete();
 57c:	0e 94 b8 02 	call	0x570	; 0x570 <i2cWaitForComplete>
 580:	08 95       	ret

00000582 <i2cStop>:
}

void i2cStop(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWSTO));
 582:	84 e9       	ldi	r24, 0x94	; 148
 584:	86 bf       	out	0x36, r24	; 54
 586:	08 95       	ret

00000588 <i2cReadAck>:
}

uint8_t i2cReadAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN) | _BV(TWEA));
 588:	84 ec       	ldi	r24, 0xC4	; 196
 58a:	86 bf       	out	0x36, r24	; 54
  i2cWaitForComplete();
 58c:	0e 94 b8 02 	call	0x570	; 0x570 <i2cWaitForComplete>
  return (TWDR);
 590:	83 b1       	in	r24, 0x03	; 3
}
 592:	08 95       	ret

00000594 <i2cReadNoAck>:

uint8_t i2cReadNoAck(void) {
  TWCR = (_BV(TWINT) | _BV(TWEN));
 594:	84 e8       	ldi	r24, 0x84	; 132
 596:	86 bf       	out	0x36, r24	; 54
  i2cWaitForComplete();
 598:	0e 94 b8 02 	call	0x570	; 0x570 <i2cWaitForComplete>
  return (TWDR);
 59c:	83 b1       	in	r24, 0x03	; 3
}
 59e:	08 95       	ret

000005a0 <i2cSend>:

void i2cSend(uint8_t data) {
  TWDR = data;
 5a0:	83 b9       	out	0x03, r24	; 3
  TWCR = (_BV(TWINT) | _BV(TWEN));                    /* inicjacja i włączenie */
 5a2:	84 e8       	ldi	r24, 0x84	; 132
 5a4:	86 bf       	out	0x36, r24	; 54
  i2cWaitForComplete();
 5a6:	0e 94 b8 02 	call	0x570	; 0x570 <i2cWaitForComplete>
 5aa:	08 95       	ret

000005ac <main>:
//adresy dla ekspandera

volatile unsigned char a=0;

int main(void)
{
 5ac:	cf 93       	push	r28
 5ae:	df 93       	push	r29
 5b0:	cd b7       	in	r28, 0x3d	; 61
 5b2:	de b7       	in	r29, 0x3e	; 62
 5b4:	66 97       	sbiw	r28, 0x16	; 22
 5b6:	0f b6       	in	r0, 0x3f	; 63
 5b8:	f8 94       	cli
 5ba:	de bf       	out	0x3e, r29	; 62
 5bc:	0f be       	out	0x3f, r0	; 63
 5be:	cd bf       	out	0x3d, r28	; 61
	
	uint8_t year=0, month=0, day=0, hour=0, minute=0, second=0;
 5c0:	19 82       	std	Y+1, r1	; 0x01
 5c2:	1a 82       	std	Y+2, r1	; 0x02
 5c4:	1b 82       	std	Y+3, r1	; 0x03
 5c6:	1c 82       	std	Y+4, r1	; 0x04
 5c8:	1d 82       	std	Y+5, r1	; 0x05
 5ca:	1e 82       	std	Y+6, r1	; 0x06
	char str[16];	
	uint8_t count = 0, men = 0;
		
	UCSRB = (1<<RXEN)|(1<<TXEN)|(1<<RXC);	//odblokowanie przerwania z odbiorem na urat
 5cc:	88 e9       	ldi	r24, 0x98	; 152
 5ce:	8a b9       	out	0x0a, r24	; 10
	
	lcd_init();
 5d0:	0e 94 28 02 	call	0x450	; 0x450 <lcd_init>
	USART_Init(MYUBRR);
 5d4:	89 e1       	ldi	r24, 0x19	; 25
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	0e 94 b7 03 	call	0x76e	; 0x76e <USART_Init>
	initI2C();
 5dc:	0e 94 b2 02 	call	0x564	; 0x564 <initI2C>
	
	LCD_DISPLAY(LCDDISPLAY);
 5e0:	60 e0       	ldi	r22, 0x00	; 0
 5e2:	8c e0       	ldi	r24, 0x0C	; 12
 5e4:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
	LCD_CLEAR;
 5e8:	60 e0       	ldi	r22, 0x00	; 0
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
	LCD_LOCATE(0,0);
 5f0:	60 e0       	ldi	r22, 0x00	; 0
 5f2:	80 e8       	ldi	r24, 0x80	; 128
 5f4:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
	lcd_puts("Hello!");	
 5f8:	80 e6       	ldi	r24, 0x60	; 96
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
	
	ds1307_setdate(91, 1, 14, 12, 00, 00);
 600:	e1 2c       	mov	r14, r1
 602:	00 e0       	ldi	r16, 0x00	; 0
 604:	2c e0       	ldi	r18, 0x0C	; 12
 606:	4e e0       	ldi	r20, 0x0E	; 14
 608:	61 e0       	ldi	r22, 0x01	; 1
 60a:	8b e5       	ldi	r24, 0x5B	; 91
 60c:	0e 94 98 00 	call	0x130	; 0x130 <ds1307_setdate>
	
	sei();
 610:	78 94       	sei
int main(void)
{
	
	uint8_t year=0, month=0, day=0, hour=0, minute=0, second=0;
	char str[16];	
	uint8_t count = 0, men = 0;
 612:	c1 2c       	mov	r12, r1
 614:	d1 2c       	mov	r13, r1
	
	sei();
	
	while(1)
	{
		ds1307_getdate(&year, &month, &day, &hour, &minute, &second);
 616:	ce 01       	movw	r24, r28
 618:	06 96       	adiw	r24, 0x06	; 6
 61a:	7c 01       	movw	r14, r24
 61c:	8e 01       	movw	r16, r28
 61e:	0b 5f       	subi	r16, 0xFB	; 251
 620:	1f 4f       	sbci	r17, 0xFF	; 255
 622:	9e 01       	movw	r18, r28
 624:	2c 5f       	subi	r18, 0xFC	; 252
 626:	3f 4f       	sbci	r19, 0xFF	; 255
 628:	ae 01       	movw	r20, r28
 62a:	4d 5f       	subi	r20, 0xFD	; 253
 62c:	5f 4f       	sbci	r21, 0xFF	; 255
 62e:	be 01       	movw	r22, r28
 630:	6e 5f       	subi	r22, 0xFE	; 254
 632:	7f 4f       	sbci	r23, 0xFF	; 255
 634:	05 97       	sbiw	r24, 0x05	; 5
 636:	0e 94 3e 01 	call	0x27c	; 0x27c <ds1307_getdate>
		
		if (a == "N")
 63a:	80 91 70 00 	lds	r24, 0x0070
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	87 56       	subi	r24, 0x67	; 103
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	59 f4       	brne	.+22     	; 0x65c <main+0xb0>
		{
			LCD_CLEAR;
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
			men ++;
 64e:	c3 94       	inc	r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 650:	87 e8       	ldi	r24, 0x87	; 135
 652:	93 e1       	ldi	r25, 0x13	; 19
 654:	01 97       	sbiw	r24, 0x01	; 1
 656:	f1 f7       	brne	.-4      	; 0x654 <main+0xa8>
 658:	00 c0       	rjmp	.+0      	; 0x65a <main+0xae>
 65a:	00 00       	nop
			_delay_ms(20);
		}
		
		switch(men){
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	c9 16       	cp	r12, r25
 660:	b9 f1       	breq	.+110    	; 0x6d0 <main+0x124>
 662:	c9 16       	cp	r12, r25
 664:	28 f0       	brcs	.+10     	; 0x670 <main+0xc4>
 666:	22 e0       	ldi	r18, 0x02	; 2
 668:	c2 16       	cp	r12, r18
 66a:	09 f4       	brne	.+2      	; 0x66e <main+0xc2>
 66c:	60 c0       	rjmp	.+192    	; 0x72e <main+0x182>
 66e:	60 c0       	rjmp	.+192    	; 0x730 <main+0x184>
			case 0:
			LCD_LOCATE(5,1);
 670:	60 e0       	ldi	r22, 0x00	; 0
 672:	85 ec       	ldi	r24, 0xC5	; 197
 674:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
			lcd_puts(itoa(hour, str, 10));
 678:	8c 81       	ldd	r24, Y+4	; 0x04
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 67a:	4a e0       	ldi	r20, 0x0A	; 10
 67c:	be 01       	movw	r22, r28
 67e:	69 5f       	subi	r22, 0xF9	; 249
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__itoa_ncheck>
 688:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(":");
 68c:	89 e6       	ldi	r24, 0x69	; 105
 68e:	90 e0       	ldi	r25, 0x00	; 0
 690:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(itoa(minute, str, 10));
 694:	8d 81       	ldd	r24, Y+5	; 0x05
 696:	4a e0       	ldi	r20, 0x0A	; 10
 698:	be 01       	movw	r22, r28
 69a:	69 5f       	subi	r22, 0xF9	; 249
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__itoa_ncheck>
 6a4:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(":");
 6a8:	89 e6       	ldi	r24, 0x69	; 105
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(itoa(second, str, 10));
 6b0:	8e 81       	ldd	r24, Y+6	; 0x06
 6b2:	4a e0       	ldi	r20, 0x0A	; 10
 6b4:	be 01       	movw	r22, r28
 6b6:	69 5f       	subi	r22, 0xF9	; 249
 6b8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ba:	90 e0       	ldi	r25, 0x00	; 0
 6bc:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__itoa_ncheck>
 6c0:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(a);
 6c4:	80 91 70 00 	lds	r24, 0x0070
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			break;
 6ce:	30 c0       	rjmp	.+96     	; 0x730 <main+0x184>
			case 1:
			LCD_LOCATE(5,1);
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	85 ec       	ldi	r24, 0xC5	; 197
 6d4:	0e 94 b6 01 	call	0x36c	; 0x36c <WriteToLCD>
			lcd_puts("20");
 6d8:	8b e6       	ldi	r24, 0x6B	; 107
 6da:	90 e0       	ldi	r25, 0x00	; 0
 6dc:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(itoa(year, str, 10));
 6e0:	89 81       	ldd	r24, Y+1	; 0x01
 6e2:	4a e0       	ldi	r20, 0x0A	; 10
 6e4:	be 01       	movw	r22, r28
 6e6:	69 5f       	subi	r22, 0xF9	; 249
 6e8:	7f 4f       	sbci	r23, 0xFF	; 255
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__itoa_ncheck>
 6f0:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts("-");
 6f4:	8e e6       	ldi	r24, 0x6E	; 110
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(itoa(month, str, 10));
 6fc:	8a 81       	ldd	r24, Y+2	; 0x02
 6fe:	4a e0       	ldi	r20, 0x0A	; 10
 700:	be 01       	movw	r22, r28
 702:	69 5f       	subi	r22, 0xF9	; 249
 704:	7f 4f       	sbci	r23, 0xFF	; 255
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__itoa_ncheck>
 70c:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts("-");
 710:	8e e6       	ldi	r24, 0x6E	; 110
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			lcd_puts(itoa(day, str, 10));
 718:	8b 81       	ldd	r24, Y+3	; 0x03
 71a:	4a e0       	ldi	r20, 0x0A	; 10
 71c:	be 01       	movw	r22, r28
 71e:	69 5f       	subi	r22, 0xF9	; 249
 720:	7f 4f       	sbci	r23, 0xFF	; 255
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__itoa_ncheck>
 728:	0e 94 9c 02 	call	0x538	; 0x538 <lcd_puts>
			break;
 72c:	01 c0       	rjmp	.+2      	; 0x730 <main+0x184>
			case 2:
			men = 0;
 72e:	c1 2c       	mov	r12, r1
			break;
		}
		
		if (count == 20)
 730:	84 e1       	ldi	r24, 0x14	; 20
 732:	d8 12       	cpse	r13, r24
 734:	05 c0       	rjmp	.+10     	; 0x740 <main+0x194>
		{
			Send_Znak(a);
 736:	80 91 70 00 	lds	r24, 0x0070
 73a:	0e 94 be 03 	call	0x77c	; 0x77c <Send_Znak>
			count=0;
 73e:	d1 2c       	mov	r13, r1
		}
		
		count++;
 740:	d3 94       	inc	r13
 742:	83 ed       	ldi	r24, 0xD3	; 211
 744:	90 e3       	ldi	r25, 0x30	; 48
 746:	01 97       	sbiw	r24, 0x01	; 1
 748:	f1 f7       	brne	.-4      	; 0x746 <main+0x19a>
 74a:	00 c0       	rjmp	.+0      	; 0x74c <main+0x1a0>
 74c:	00 00       	nop
 74e:	63 cf       	rjmp	.-314    	; 0x616 <main+0x6a>

00000750 <__vector_11>:
		_delay_ms(50);
	}
}

ISR(USART_RXC_vect)
{
 750:	1f 92       	push	r1
 752:	0f 92       	push	r0
 754:	0f b6       	in	r0, 0x3f	; 63
 756:	0f 92       	push	r0
 758:	11 24       	eor	r1, r1
 75a:	8f 93       	push	r24
	a =UDR;
 75c:	8c b1       	in	r24, 0x0c	; 12
 75e:	80 93 70 00 	sts	0x0070, r24
 762:	8f 91       	pop	r24
 764:	0f 90       	pop	r0
 766:	0f be       	out	0x3f, r0	; 63
 768:	0f 90       	pop	r0
 76a:	1f 90       	pop	r1
 76c:	18 95       	reti

0000076e <USART_Init>:
#include "UART.h"

void USART_Init(unsigned int ubrr)
{
	UBRRH = (unsigned char)(ubrr>>8);
 76e:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)ubrr;
 770:	89 b9       	out	0x09, r24	; 9
	UCSRB = (1<<RXEN)|(1<<TXEN);
 772:	88 e1       	ldi	r24, 0x18	; 24
 774:	8a b9       	out	0x0a, r24	; 10
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0); //Dwa bity stopu
 776:	8e e8       	ldi	r24, 0x8E	; 142
 778:	80 bd       	out	0x20, r24	; 32
 77a:	08 95       	ret

0000077c <Send_Znak>:
	return UDR;
}

void Send_Znak(char znak)
{
	while(!(UCSRA & (1<<UDRE)));
 77c:	5d 9b       	sbis	0x0b, 5	; 11
 77e:	fe cf       	rjmp	.-4      	; 0x77c <Send_Znak>
	UDR=znak;
 780:	8c b9       	out	0x0c, r24	; 12
 782:	08 95       	ret

00000784 <__udivmodqi4>:
 784:	99 1b       	sub	r25, r25
 786:	79 e0       	ldi	r23, 0x09	; 9
 788:	04 c0       	rjmp	.+8      	; 0x792 <__udivmodqi4_ep>

0000078a <__udivmodqi4_loop>:
 78a:	99 1f       	adc	r25, r25
 78c:	96 17       	cp	r25, r22
 78e:	08 f0       	brcs	.+2      	; 0x792 <__udivmodqi4_ep>
 790:	96 1b       	sub	r25, r22

00000792 <__udivmodqi4_ep>:
 792:	88 1f       	adc	r24, r24
 794:	7a 95       	dec	r23
 796:	c9 f7       	brne	.-14     	; 0x78a <__udivmodqi4_loop>
 798:	80 95       	com	r24
 79a:	08 95       	ret

0000079c <__umulhisi3>:
 79c:	a2 9f       	mul	r26, r18
 79e:	b0 01       	movw	r22, r0
 7a0:	b3 9f       	mul	r27, r19
 7a2:	c0 01       	movw	r24, r0
 7a4:	a3 9f       	mul	r26, r19
 7a6:	70 0d       	add	r23, r0
 7a8:	81 1d       	adc	r24, r1
 7aa:	11 24       	eor	r1, r1
 7ac:	91 1d       	adc	r25, r1
 7ae:	b2 9f       	mul	r27, r18
 7b0:	70 0d       	add	r23, r0
 7b2:	81 1d       	adc	r24, r1
 7b4:	11 24       	eor	r1, r1
 7b6:	91 1d       	adc	r25, r1
 7b8:	08 95       	ret

000007ba <__itoa_ncheck>:
 7ba:	bb 27       	eor	r27, r27
 7bc:	4a 30       	cpi	r20, 0x0A	; 10
 7be:	31 f4       	brne	.+12     	; 0x7cc <__itoa_ncheck+0x12>
 7c0:	99 23       	and	r25, r25
 7c2:	22 f4       	brpl	.+8      	; 0x7cc <__itoa_ncheck+0x12>
 7c4:	bd e2       	ldi	r27, 0x2D	; 45
 7c6:	90 95       	com	r25
 7c8:	81 95       	neg	r24
 7ca:	9f 4f       	sbci	r25, 0xFF	; 255
 7cc:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__utoa_common>

000007d0 <__utoa_ncheck>:
 7d0:	bb 27       	eor	r27, r27

000007d2 <__utoa_common>:
 7d2:	fb 01       	movw	r30, r22
 7d4:	55 27       	eor	r21, r21
 7d6:	aa 27       	eor	r26, r26
 7d8:	88 0f       	add	r24, r24
 7da:	99 1f       	adc	r25, r25
 7dc:	aa 1f       	adc	r26, r26
 7de:	a4 17       	cp	r26, r20
 7e0:	10 f0       	brcs	.+4      	; 0x7e6 <__utoa_common+0x14>
 7e2:	a4 1b       	sub	r26, r20
 7e4:	83 95       	inc	r24
 7e6:	50 51       	subi	r21, 0x10	; 16
 7e8:	b9 f7       	brne	.-18     	; 0x7d8 <__utoa_common+0x6>
 7ea:	a0 5d       	subi	r26, 0xD0	; 208
 7ec:	aa 33       	cpi	r26, 0x3A	; 58
 7ee:	08 f0       	brcs	.+2      	; 0x7f2 <__utoa_common+0x20>
 7f0:	a9 5d       	subi	r26, 0xD9	; 217
 7f2:	a1 93       	st	Z+, r26
 7f4:	00 97       	sbiw	r24, 0x00	; 0
 7f6:	79 f7       	brne	.-34     	; 0x7d6 <__utoa_common+0x4>
 7f8:	b1 11       	cpse	r27, r1
 7fa:	b1 93       	st	Z+, r27
 7fc:	11 92       	st	Z+, r1
 7fe:	cb 01       	movw	r24, r22
 800:	0c 94 02 04 	jmp	0x804	; 0x804 <strrev>

00000804 <strrev>:
 804:	dc 01       	movw	r26, r24
 806:	fc 01       	movw	r30, r24
 808:	67 2f       	mov	r22, r23
 80a:	71 91       	ld	r23, Z+
 80c:	77 23       	and	r23, r23
 80e:	e1 f7       	brne	.-8      	; 0x808 <strrev+0x4>
 810:	32 97       	sbiw	r30, 0x02	; 2
 812:	04 c0       	rjmp	.+8      	; 0x81c <strrev+0x18>
 814:	7c 91       	ld	r23, X
 816:	6d 93       	st	X+, r22
 818:	70 83       	st	Z, r23
 81a:	62 91       	ld	r22, -Z
 81c:	ae 17       	cp	r26, r30
 81e:	bf 07       	cpc	r27, r31
 820:	c8 f3       	brcs	.-14     	; 0x814 <strrev+0x10>
 822:	08 95       	ret

00000824 <_exit>:
 824:	f8 94       	cli

00000826 <__stop_program>:
 826:	ff cf       	rjmp	.-2      	; 0x826 <__stop_program>
